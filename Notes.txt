


4) Currency conversion service call currency exchange service using URL and fetch data
e.g. ResponseEntity<CurrencyConversion> responseEntity
                = new RestTemplate() .getForEntity("http://localhost:8001/currency-exchange/from/{from}/to/{to}", CurrencyConversion.class, uriVariables);

5)This calling can be handle using spring cloud feign
  a) Create interface
    @FeignClient(name="currency-exchange", url="localhost:8000")
    //@FeignClient(name="currency-exchange")
    public interface CurrencyExchangeProxy {

        @GetMapping("/currency-exchange/from/{from}/to/{to}")
        public CurrencyConversion retrieveExchangeValue(
                @PathVariable String from,
                @PathVariable String to);

    }

  b) This can be used to fetch data in controller
      CurrencyConversion currencyConversion = proxy.retrieveExchangeValue(from, to);
      where proxy is object of above created interface


6) It is difficult for each time to set the URL as mentioned in step 4 or step 5
   that why we use Naming server or Service Registry.
   a)Naming server provide the instances , and load balance between them

7) Added new model naming-server with new module
  Dependency is spring-cloud-starter-netflix-eureka-server

8) In Conversion and Exchanger dependency of client "spring-cloud-starter-config" replaced with "spring-cloud-starter-netflix-eureka-client"
 Also add eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka in properties in Conversion and Exchanger so that it connect with proper eureka it there are multiple eureka server

8) Change the proxy annotation in exchanger from  @FeignClient(name="currency-exchange", url="localhost:8000") to @FeignClient(name="currency-exchange").
 It will directly pick up URL form the name itself
